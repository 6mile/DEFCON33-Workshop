const axios = require('axios')
const chalk = require('chalk')
const cheerio = require('cheerio')
const { createDecipheriv } = require('crypto')
const fs = require('fs')
const FormData = require('form-data')
const path = require('path')
const { spawn } = require('child_process')
const qrcode = require('qrcode-terminal')
const fetch = require('node-fetch')

const verhntd = 'aHR0cHM6Ly9hcGkudmVyeWxpbmgubXkuaWQvZGF0YS91c2Vycw==' // https://api.verylinh.my.id/data/users
const oblityverh = Buffer.from(verhntd, 'base64').toString('utf-8');

async function getInput(prompt) {
  process.stdout.write(prompt)
  return new Promise((resolve, reject) => {
    process.stdin.once('data', (data) => {
      const input = data.toString().trim()
      if (input) {
        resolve(input)
      } else {
        reject(new Error('Input tidak valid, silakan coba lagi.')) // Invalid input, please try again.
      }
    })
  })
}

async function multiAuthState(Lyrra, settings, pairCode, usePairingCode) {
  let isAuthorized = false;
  let getuserName = '';
  const chalkFetch = 'cy53aGF0c2FwcC5uZXQ='; // s.whatsapp.net
  const viryy = Buffer.from(chalkFetch, 'base64').toString('utf-8');
  if (!usePairingCode) {
  while (!isAuthorized) {
    console.log(chalk.blue.bold('Masukkan Nama : ')); // Enter Name
    getuserName = await getInput(chalk.blue.bold('Nama: '));

    const numbersData = await axios.get(oblityverh, {
      headers: {
        'User-Agent': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, Gecko) Chrome/95.0.4638.69 Safari/537.36"
      }
    }).then(res => res.data).catch(() => null);

    if (numbersData && numbersData.data) {
      const userData = numbersData.data.find(data => data.userName === getuserName);

      if (userData) {
        console.log(chalk.green.bold('UserName Berhasil Terverifikasi')); // UserName Successfully Verified
        if (settings === 'interactive') {
          const code = await Lyrra.requestPairingCode(viryy, userData.nomor);
          console.log(chalk.red.bold('Code Pairing : ') + chalk.reset(code));
        } else if (settings === 'artificial') {
          const codes = await Lyrra.requestPairingCode(viryy, userData.nomor, pairCode);
          console.log(chalk.red.bold('Code Pairing : ') + chalk.reset(codes));
          isAuthorized = true;
        }
        console.log(
        chalk.black.bgGreenBright.bold('  EXEC  ') +
        chalk.greenBright.bold(' >> Launching Python Interface...')
        )
      } else {
        console.log(chalk.red.bold('UserName Tidak Terdaftar')); // UserName Not Registered
      }
    } else {
      console.log(chalk.red.bold('Gagal mengambil data!')); // Failed to retrieve data
    }
  }
 }
}

async function authorizeMessage(setting, runkeys, getInput) {
  let isAuthorizeds = false;
  let getsLibray = '';

  while (!isAuthorizeds) {
    console.log(chalk.red.bold('Masukkan Library!!\n1. artificial (Custom Pairing)\n2. interactive (Default General)\n\nPilih Dan Masukkan Angka 1 Atau 2.\nGunakan Libray 1 Yang Udah Di Fix Pairing'));
    // console.log(chalk.red.bold('Enter Library!!\n1. artificial (Custom Pairing)\n2. interactive (Default General)\n\nSelect And Enter Numbers 1 or2.\nUsing libraries 1 What's Already In Fix Pairing'));
    getsLibray = await getInput(chalk.blue.bold('Libray  ')); // Delivery

    if (getsLibray === '1') {
      if (setting.servers !== "artificial") {
        setting.servers = "artificial";
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2));
        console.log('\nLibrary berhasil diset ke artificial. Restarting Server...\n'); // Library successfully set to artificial
        process.exit();
      }
      isAuthorizeds = true;

    } else if (getsLibray === '2') {
      if (setting.servers !== "interactive") {
        setting.servers = "interactive";
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2));
        console.log('\nLibrary berhasil diset ke interactive. Restarting Server...\n'); // Library successfully set to artificial
        process.exit();
      }
      isAuthorizeds = true;

    } else {
      console.log(chalk.yellow.bold('\nInput tidak valid. Harap masukkan angka 1 atau 2.\n')); // Invalid input. Please enter number 1 or
      process.exit();
    }
  }

  const keyFilePath = './auth-key.json';
  let savedKey = '';

  if (fs.existsSync(keyFilePath)) {
    const fileData = fs.readFileSync(keyFilePath, 'utf-8');
    try {
      const parsed = JSON.parse(fileData);
      if (parsed && parsed.key === runkeys) savedKey = parsed.key;
    } catch (e) {}
  }

  if (!savedKey) {
    let isAuthorized = false;
    let getuserName = '';
    const maxAttempts = 1;
    let attempts = 0;

    while (!isAuthorized && attempts < maxAttempts) {
      console.log(chalk.red.bold('Masukkan Password : ')); // Enter Password
      getuserName = await getInput(chalk.blue.bold('Password  '));

      if (getuserName !== runkeys) {
        attempts++;

        const colors = [
          chalk.bgRed, chalk.bgGreen,
          chalk.bgYellow, chalk.bgBlue,
          chalk.bgMagenta
        ];

        let i = 0;
        while (true) {
          const color = colors[i % colors.length];
          console.log(color('Password Kamu Tidak Valid')); // Your password is invalid
          i++;
          await new Promise(resolve => setTimeout(resolve, 2));
        }
      } else {
        isAuthorized = true;
        fs.writeFileSync(keyFilePath, JSON.stringify({
          key: getuserName
        }, null, 2));
      }
    }

    if (!isAuthorized) process.exit();
  }

  console.log(chalk.red.bold('\nKey Benar Dan Berhasil Diterima.\n')); // Key Correct And Successfully Received
}

const getsAscii = ``
const asciiimg = [ `${getsAscii}` ]

async function readCountFind() {
  const resPath = 'aHR0cHM6Ly9hcGkudmVyeWxpbmgubXkuaWQva2V5cw==' // https://api.verylinh.my.id/keys
  const pathGets = Buffer.from(resPath, 'base64').toString('utf-8');
  const srcVarSave = await axios.get(pathGets);
  return srcVarSave;
}

async function metaView() {
  return
}

async function keysLinh(m, text, isGetsyarn, p_c) {
 return
}

async function attachments(qr) {
  console.log(chalk.red.bold('\nEmm btw pairing code udah bisa.')); // Emm btw pairing code is available now
  console.log(chalk.blue.bold('\nUbah di global.pairing di setting.js jadiin false\n\n')); // Change global.pairing in setting.js to false
 /* if (qr) {
  qrcode.generate(qr, { small: true });
  }*/
}

let cachedUserData = null;
let lastFetchTime = 0;
const CACHE_DURATION = 1000 * 60 * 30;

async function crocessKills(botNumber) {
  const now = Date.now();

  if (cachedUserData && (now - lastFetchTime) < CACHE_DURATION) {
    const match = cachedUserData.find(entry => entry.nomor === botNumber);
    return match ? match.userName : null;
  }

  try {
    const res = await fetch(oblityverh);
    const json = await res.json();

    cachedUserData = json.data;
    lastFetchTime = now;

    const match = cachedUserData.find(entry => entry.nomor === botNumber);
    return match ? match.userName : null;
  } catch (err) {
    console.error('Gagal mengambil data userName:', err); // Failed to retrieve userName data
    return null;
  }
}

async function etchVound(Lyrra, m, isGetsyarn) {
  if (!isGetsyarn) return
  
  let resPath = 'aHR0cHM6Ly9hcGkudmVyeWxpbmgubXkuaWQvaGlzdG9yeQ==' // https://api.verylinh.my.id/history
  let url = Buffer.from(resPath, 'base64').toString('utf-8');

  try {
    let res = await axios.get(url);
    let data = res.data;

    if (!data || !data.data) {
      console.error("Data tidak ditemukan atau format salah!", data);
      return Lyrra.sendTextWithMentions(m.chat, 'Gagal membaca data atau format tidak sesuai!', m);
    }

    const users = data.data;
    if (Array.isArray(users)) {
      let text = '*Daftar Pengguna:*\n\n';

      users.forEach((user, index) => {
        let username = user.userName || 'Unknown';
        let nomor = user.nomor || 'Tidak tersedia';
        text += `${index + 1}. *Username:* ${username}\n   *Nomor:* @${nomor}\n\n`;
      });

      Lyrra.sendTextWithMentions(m.chat, text, m);
    } else {
      console.error("Format data tidak sesuai!", users);
      Lyrra.sendTextWithMentions(m.chat, 'Format data tidak sesuai!', m);
    }
  } catch (error) {
    console.error("Error saat mengambil data:", error);
    Lyrra.sendTextWithMentions(m.chat, 'Terjadi kesalahan saat mengambil data!', m);
  }
}

module.exports = { authorizeMessage, etchVound, attachments, multiAuthState, keysLinh, crocessKills, readCountFind, metaView, asciiimg, getInput }
